buildscript {
   repositories {
      jcenter()
   }
   dependencies {
      classpath 'me.champeau.gradle:jmh-gradle-plugin:0.1.2'
   }
}

ext.jmhVersion = "1.0.1"
ext.guavaVersion = "18.0"

subprojects {
    apply plugin: 'java'
    repositories.jcenter()
}

project(':kindafasthash-core') {

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-api:1.7.5'
        compile "com.google.guava:guava:$guavaVersion"

//        compile "org.openjdk.jmh:jmh-core:$jmhVersion"

        testCompile "junit:junit:4.11"
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile "com.google.guava:guava-testlib:$guavaVersion"
        testCompile 'com.codahale.metrics:metrics-core:3.0.1'
    }
}

project(':kindafasthash-benchmarks') {
    apply plugin: 'me.champeau.gradle.jmh'

    dependencies {
        compile project(':kindafasthash-core')
        jmh "org.openjdk.jmh:jmh-core:$jmhVersion"
        jmh "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"

        // need to add the jmh jars to the compile config so idea picks them up
        compile "org.openjdk.jmh:jmh-core:$jmhVersion"
        compile "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
    }

    tasks.compileJava << {
        // have to remove the META-INF/* files as the empty Benchmarks list generated
        // from compileJava will override that from jmh dir *sigh*
        delete "${sourceSets.main.output.classesDir}/META-INF"
    }

    jmh {
        include = "com.logicalpractice.kindafasthash.MapBenchmark.*"
        verbosity = 'EXTRA'
    }
}

